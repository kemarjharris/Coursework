// Code generated by dagger-compiler.  Do not edit.
package ca.utoronto.utm.mcs;

import com.mongodb.client.MongoClient;
import com.sun.net.httpserver.HttpServer;
import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @dagger.Provides} methods.
 */
public final class DaggerModule$$ModuleAdapter extends ModuleAdapter<DaggerModule> {
  private static final String[] INJECTS = { "members/ca.utoronto.utm.mcs.App", };

  private static final Class<?>[] STATIC_INJECTIONS = { };

  private static final Class<?>[] INCLUDES = { };

  public DaggerModule$$ModuleAdapter() {
    super(DaggerModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DaggerModule module) {
    bindings.contributeProvidesBinding("com.mongodb.client.MongoClient", new ProvideMongoClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.sun.net.httpserver.HttpServer", new ProvideHttpServerProvidesAdapter(module));
  }

  /**
   * A {@code Binding<MongoClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<MongoClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMongoClientProvidesAdapter extends ProvidesBinding<MongoClient> {
    private final DaggerModule module;

    public ProvideMongoClientProvidesAdapter(DaggerModule module) {
      super("com.mongodb.client.MongoClient", NOT_SINGLETON, "ca.utoronto.utm.mcs.DaggerModule", "provideMongoClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<MongoClient>}.
     */
    @Override
    public MongoClient get() {
      return module.provideMongoClient();
    }
  }

  /**
   * A {@code Binding<HttpServer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<HttpServer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHttpServerProvidesAdapter extends ProvidesBinding<HttpServer> {
    private final DaggerModule module;

    public ProvideHttpServerProvidesAdapter(DaggerModule module) {
      super("com.sun.net.httpserver.HttpServer", NOT_SINGLETON, "ca.utoronto.utm.mcs.DaggerModule", "provideHttpServer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<HttpServer>}.
     */
    @Override
    public HttpServer get() {
      return module.provideHttpServer();
    }
  }
}
