// Code generated by dagger-compiler.  Do not edit.
package ca.utoronto.utm.mcs;

import com.sun.net.httpserver.HttpServer;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<ca.utoronto.utm.mcs.App>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ca.utoronto.utm.mcs.App} and its
 * dependencies.
 *
 * Being a {@code Provider<ca.utoronto.utm.mcs.App>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<ca.utoronto.utm.mcs.App>} and handling injection
 * of annotated fields.
 */
public final class App$$InjectAdapter extends Binding<App> {
  private Binding<HttpServer> server;

  private Binding<Config> config;

  public App$$InjectAdapter() {
    super("ca.utoronto.utm.mcs.App", "members/ca.utoronto.utm.mcs.App", NOT_SINGLETON, App.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    server = (Binding<HttpServer>) linker.requestBinding("com.sun.net.httpserver.HttpServer", App.class, getClass().getClassLoader());
    config = (Binding<Config>) linker.requestBinding("ca.utoronto.utm.mcs.Config", App.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(server);
    injectMembersBindings.add(config);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<App>}.
   */
  @Override
  public App get() {
    App result = new App();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<App>}.
   */
  @Override
  public void injectMembers(App object) {
    object.server = server.get();
    object.config = config.get();
  }
}
